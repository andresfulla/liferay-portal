/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

import ClayButton from '@clayui/button';
import ClayIcon from '@clayui/icon';
import {useModal} from '@clayui/modal';
import {cancelDebounce, debounce} from 'frontend-js-web';
import React from 'react';

import {
	CREATE_SEGMENTS_EXPERIENCE,
	SELECT_SEGMENTS_EXPERIENCE,
	EDIT_SEGMENTS_EXPERIENCE
} from '../../../actions/actions.es';
import useDispatch from '../../../store/hooks/useDispatch.es';
import useSelector from '../../../store/hooks/useSelector.es';
import ExperienceItem from './ExperienceItem.es';
import ExperienceModal from './ExperienceModal.es';

const {useRef, useState} = React;

const DEFAULT_EXPERIENCE_ID = '0';

export function useDebounceCallback(callback, milliseconds) {
	const callbackRef = useRef(debounce(callback, milliseconds));

	return [callbackRef.current, () => cancelDebounce(callbackRef.current)];
}

const ExperienceDropdown = () => {
	const [open, setOpen] = useState(false);
	const [openModal, setOpenModal] = useState(false);
	const [editingExperience, setEditingExperience] = useState({});

	const {observer, onClose: onModalClose} = useModal({
		onClose: () => setOpenModal(false)
	});
	const dispatch = useDispatch();

	const {activeExperience, activeExperienceId} = useSelector(state => {
		const activeExperienceId = state.segmentsExperienceId;

		return {
			activeExperience:
				state.availableSegmentsExperiences[activeExperienceId],
			activeExperienceId
		};
	});
	const hasSegmentPermission = useSelector(
		state => state.hasSegmentsEntryPermission
	);

	const hasUpdatePermissions = useSelector(
		state => state.hasUpdatePermissions
	);
	const experiences = useSelector(state => {
		return Object.entries(state.availableSegmentsExperiences)
			.map(([, experience]) => {
				const segment =
					state.availableSegmentsEntries[experience.segmentsEntryId];

				return {...experience, segmentsEntryName: segment.name};
			})
			.sort((a, b) => b.priority - a.priority);
	});
	const segments = useSelector(state =>
		Object.entries(state.availableSegmentsEntries).map(
			([, segment]) => segment
		)
	);

	const lockedActiveExperience = useSelector(
		state => state.lockedActiveSegmentsExperience
	);
	const portletNamespace = useSelector(state => state.portletNamespace);

	const [debouncedSetOpen] = useDebounceCallback(setOpen, 100);

	const canCreateExperiences = true;

	const _handleDropdownBlur = () => debouncedSetOpen(false);
	const _handleDropdownFocus = () => debouncedSetOpen(true);
	const _handleDropdownButtonClick = () => debouncedSetOpen(true);
	const _handleDropdownButtonBlur = () => debouncedSetOpen(false);
	const _openEditModal = ({name, segmentsEntryId, segmentsExperienceId}) => {
		setEditingExperience({name, segmentsEntryId, segmentsExperienceId});
		debouncedSetOpen(true);
		setOpenModal(true);
	};
	const _openCreateModal = () => {
		debouncedSetOpen(true);
		setOpenModal(true);
	};
	const _handleExperienceCreation = ({
		name,
		segmentsEntryId,
		segmentsExperienceId
	}) => {
		if (segmentsExperienceId) {
			dispatch({
				name,
				segmentsEntryId,
				segmentsExperienceId,
				type: EDIT_SEGMENTS_EXPERIENCE
			})
				.done(() => {
					onModalClose();

					Liferay.Util.openToast({
						title: Liferay.Language.get(
							'the-experience-was-updated-successfully'
						),
						type: 'success'
					});
				})
				.failed(() => {
					// TODO implement edit experience Error
				});
		} else {
			dispatch({
				name,
				segmentsEntryId,
				type: CREATE_SEGMENTS_EXPERIENCE
			})
				.done(() => {
					onModalClose();

					Liferay.Util.openToast({
						title: Liferay.Language.get(
							'the-experience-was-created-successfully'
						),
						type: 'success'
					});
				})
				.failed(_error => {
					// TODO implement create Experience Error
				});
		}
	};

	return (
		<div className="position-relative segments-experience-selector">
			<label
				className="mr-2"
				htmlFor={`${portletNamespace}SegmentsExperienceSelector`}
			>
				{Liferay.Language.get('experience')}
			</label>

			<button
				className="align-items-end btn btn-secondary btn-sm d-inline-flex form-control-select justify-content-between mr-2 text-left text-truncate"
				id={`${portletNamespace}SegmentsExperienceSelector`}
				onBlur={_handleDropdownButtonBlur}
				onClick={_handleDropdownButtonClick}
				type="button"
			>
				<span className="text-truncate">{activeExperience.name}</span>

				{lockedActiveExperience && <ClayIcon symbol="lock" />}
			</button>
			<div
				className={`p-4 rounded dropdown-menu ${open ? 'toggled' : ''}`}
				onBlur={_handleDropdownBlur}
				onFocus={_handleDropdownFocus}
				tabIndex="-1"
			>
				<div className="align-items-end d-flex justify-content-between mb-4">
					<h3 className="mb-0">
						{Liferay.Language.get('select-experience')}
					</h3>

					{canCreateExperiences === true && (
						<ClayButton
							aria-label={Liferay.Language.get('new-experience')}
							displayType="secondary"
							label={Liferay.Language.get('new-experience')}
							onClick={_openCreateModal}
							small
						>
							{Liferay.Language.get('new-experience')}
						</ClayButton>
					)}
				</div>

				<ExperiencesList
					activeExperienceId={activeExperienceId}
					experiences={experiences}
					hasUpdatePermissions={hasUpdatePermissions}
					onEditExperience={_openEditModal}
				/>
			</div>

			{openModal && (
				<ExperienceModal
					experienceId={editingExperience.segmentsExperienceId}
					hasSegmentPermission={hasSegmentPermission}
					initialName={editingExperience.name}
					observer={observer}
					onClose={onModalClose}
					onSubmit={_handleExperienceCreation}
					segmentId={editingExperience.segmentsEntryId}
					segments={segments}
					modalTitle={Liferay.Language.get('new-experience')}
				/>
			)}
		</div>
	);
};

const ExperiencesList = ({
	activeExperienceId,
	experiences,
	hasUpdatePermissions,
	onEditExperience
}) => {
	const dispatch = useDispatch();

	const _selectExperience = id => {
		dispatch({
			segmentsExperienceId: id,
			type: SELECT_SEGMENTS_EXPERIENCE
		});
	};

	return (
		<ul className="list-unstyled mt-4">
			{experiences.map(experience => {
				const active =
					experience.segmentsExperienceId === activeExperienceId;

				const editable =
					hasUpdatePermissions &&
					experience.segmentsExperienceId !== DEFAULT_EXPERIENCE_ID &&
					!experience.hasLockedSegmentsExperiment;

				return (
					<ExperienceItem
						active={active}
						editable={editable}
						experience={experience}
						key={experience.segmentsExperienceId}
						onEditExperience={onEditExperience}
						onSelect={_selectExperience}
					/>
				);
			})}
		</ul>
	);
};

export default ExperienceDropdown;
