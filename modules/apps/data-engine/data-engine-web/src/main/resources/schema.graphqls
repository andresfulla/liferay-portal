input DataDefinitionFieldInput {
	defaultValue: String
	indexable: Boolean
	labels: [LocalizedValueInput]
	localizable: Boolean
	name: String!
	repeatable: Boolean
	required: Boolean
	tips: [LocalizedValueInput]
	type: String!
}

input DataDefinitionInput {
	dataDefinitionId: ID
	descriptions: [LocalizedValueInput]
	fields: [DataDefinitionFieldInput]!
	names: [LocalizedValueInput]!
	storageType: String!
}

input LocalizedValueInput {
	key: String!
	value: String!
}

schema {
	mutation: MutationType
	query: QueryType
}

type CountDataDefinitionType {
	total: Int
}

type DataDefinitionFieldType {
	defaultValue: String
	indexable: Boolean
	labels: [LocalizedValueType]
	localizable: Boolean
	name: String
	repeatable: Boolean
	required: Boolean
	tips: [LocalizedValueType]
	type: String
}

type DataDefinition {
	dataDefinitionId: ID
	descriptions: [LocalizedValueType]
	fields: [DataDefinitionFieldType]
	names: [LocalizedValueType]
	storageType: String
}

type DeleteDataDefinitionType {
	dataDefinition: DataDefinition
}

type GetDataDefinitionType {
	dataDefinition: DataDefinition
}

type ListDataDefinitionType {
	dataDefinitions: [DataDefinition]
}

type LocalizedValueType {
	key: String
	value: String
}

type MutationType {
	deleteDataDefinition(dataDefinitionId: ID!, languageId: String!): DeleteDataDefinitionType
	saveDataDefinition(userId: ID!, groupId: ID!, dataDefinition: DataDefinitionInput!, languageId: String!): SaveDataDefinitionType
}

type QueryType {
	countDataDefinition(companyId: ID!, groupId: ID!, languageId: String!): CountDataDefinitionType
	getDataDefinition(dataDefinitionId: ID!, languageId: String!): GetDataDefinitionType
	listDataDefinition(companyId: ID!, groupId: ID!, languageId: String!, start: Int!, end: Int!): ListDataDefinitionType

}

type SaveDataDefinitionType {
	dataDefinition: DataDefinition
}